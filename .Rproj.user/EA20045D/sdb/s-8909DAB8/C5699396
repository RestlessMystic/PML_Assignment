{
    "contents" : "---\ntitle: Analysis of Activity Tracking Device data\n  Report\nauthor: \"Govind Maheswaran\"\noutput:\n  html_document:\n    fig_height: 9\n    fig_width: 9\n---\n\n## Introduction  \nUsing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it.  \n\nIn this project, we will use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants who were asked to do barbell lifts,  to predict how they did the exercise.  \n\n## Data Preprocessing  \n```{r, cache = T}\nlibrary(caret)\nlibrary(rpart)\nlibrary(rpart.plot)\nlibrary(randomForest)\nlibrary(corrplot)\n```\n### Getting Data\nThe data for the project was taken from http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset). \n\n```{r, cache = T}\ntrainUrl <-\"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv\"\ntestUrl <- \"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv\"\ntrainFile <- \"./data/pml-training.csv\"\ntestFile  <- \"./data/pml-testing.csv\"\nif (!file.exists(\"./data\")) {\n  dir.create(\"./data\")\n}\nif (!file.exists(trainFile)) {\n  download.file(trainUrl, destfile=trainFile, method=\"curl\")\n}\nif (!file.exists(testFile)) {\n  download.file(testUrl, destfile=testFile, method=\"curl\")\n}\n```  \n### Reading Data\nAfter downloading the data from the data source, we can read the two csv files into two data frames.  \n```{r, cache = T}\ntrainRaw <- read.csv(\"./data/pml-training.csv\")\ndim(trainRaw)\n\ntestRaw <- read.csv(\"./data/pml-testing.csv\")\ndim(testRaw)\n```\nThe training data set contains 19622 observations of 160 variables, and test data  contains 20 observations of 160 variables. We will be trying to predict the outcome of the \"classe\" variable.\n\n### Cleaning data\nStripping data of columns with missing values, and irrelevant variables.\n```{r, cache = T}\nsum(complete.cases(trainRaw))\n```\nRemoving columns with NA or missing values.\n```{r, cache = T}\ntrainRaw <- trainRaw[, colSums(is.na(trainRaw)) == 0] \ntestRaw <- testRaw[, colSums(is.na(testRaw)) == 0] \n```  \nIgnoring columns that are irrelevant.\n```{r, cache = T}\nclasse <- trainRaw$classe\ntrainRemove <- grepl(\"^X|timestamp|window\", names(trainRaw))\ntrainRaw <- trainRaw[, !trainRemove]\ntrainCleaned <- trainRaw[, sapply(trainRaw, is.numeric)]\ntrainCleaned$classe <- classe\ntestRemove <- grepl(\"^X|timestamp|window\", names(testRaw))\ntestRaw <- testRaw[, !testRemove]\ntestCleaned <- testRaw[, sapply(testRaw, is.numeric)]\n```\nNow, the cleaned training data contains 19622 observations of 53 variables, and  test data set contains 20 observations of 53 variables. The \"classe\" variable is still in the cleaned set.\n\n### Slicing data\nFor crossvalidation, the training data is split into training and testing sub data sets. \n```{r, cache = T}\nset.seed(1303017) # For reproducibile purpose\ninTrain <- createDataPartition(trainCleaned$classe, p=0.70, list=F)\ntrainData <- trainCleaned[inTrain, ]\ntestData <- trainCleaned[-inTrain, ]\n```\n\n### Modeling Data\nThe **Random Forest** algorithm is used to fit a predictive model for activity recognition as it automatically selects relevant variables and is robust to outliers. **5-fold cross validation** is used when applying the algorithm.  \n```{r, cache = T}\ncontrolRf <- trainControl(method=\"cv\", 5)\nmodelRf <- train(classe ~ ., data=trainData, method=\"rf\", trControl=controlRf, ntree=250)\nmodelRf\n```\nThe performance of the model on the validation data set can be estimated as follows..\n```{r, cache = T}\npredictRf <- predict(modelRf, testData)\nconfusionMatrix(testData$classe, predictRf)\n```\n```{r, cache = T}\naccuracy <- postResample(predictRf, testData$classe)\naccuracy\noose <- 1 - as.numeric(confusionMatrix(testData$classe, predictRf)$overall[1])\noose\n```\nThe estimated accuracy of the model is 99.4%, and the estimated out-of-sample error is 0.59%.\n\n## Predicting for Test Data Set\nApplying the model to the original testing data set.. \n```{r, cache = T}\nresult <- predict(modelRf, testCleaned[, -length(names(testCleaned))])\nresult\n```  \n\n## Appendix: Figures\n1. Correlation Matrix   \n```{r, cache = T}\ncorrPlot <- cor(trainData[, -length(names(trainData))])\ncorrplot(corrPlot, method=\"color\")\n```\n2. Decision Tree \n```{r, cache = T}\ntreeModel <- rpart(classe ~ ., data=trainData, method=\"class\")\nprp(treeModel) # fast plot\n```",
    "created" : 1427019767192.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "878522320",
    "id" : "C5699396",
    "lastKnownWriteTime" : 1427023265,
    "path" : "~/PML/report.Rmd",
    "project_path" : "report.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}